var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/DocumentationStaticController.html",[0,1.178,1,1.716]],["body/controllers/DocumentationStaticController.html",[0,1.93,1,2.81,2,1.586,3,0.653,4,0.754,5,0.653,6,2.464,7,2.81,8,3.141,9,0.653,10,1.93,11,4.288,12,2.665,13,0.046,14,1.586,15,3.864,16,1.409,17,1.194,18,1.194,19,0.863,20,2.346,21,2.309,22,3.141,23,0.863,24,1.11,25,2.665,26,2.665,27,1.586,28,3.864,29,0.038,30,0.038]],["title/modules/DocumentationStaticModule.html",[31,1.329,32,1.716]],["body/modules/DocumentationStaticModule.html",[1,2.757,2,1.537,3,0.633,4,0.731,5,0.633,6,1.963,7,2.238,13,0.046,18,1.361,19,0.837,20,2.481,21,2.988,22,3.045,29,0.037,30,0.037,31,2.136,32,3.203,33,1.734,34,2.136,35,3.045,36,3.045,37,2.757,38,2.238,39,2.238,40,3.746,41,2.583,42,3.746,43,3.746,44,3.045,45,2.238,46,3.746,47,2.583,48,2.583,49,3.746,50,3.746]],["title/injectables/DocumentationStaticService.html",[20,1.329,51,0.93]],["body/injectables/DocumentationStaticService.html",[3,0.676,4,0.781,5,0.676,6,2.517,7,2.87,9,0.676,10,1.972,11,4.339,13,0.046,14,1.643,16,1.459,17,1.22,18,1.016,19,0.894,20,2.223,23,0.894,24,1.149,27,1.643,29,0.039,30,0.039,51,1.556,52,2.391,53,3.253,54,4.002,55,4.002,56,4.002]],["title/interfaces/IBotCommand.html",[57,1.047,58,1.505]],["body/interfaces/IBotCommand.html",[3,0.347,4,0.242,5,0.21,9,0.347,13,0.048,17,1.069,18,0.984,19,0.277,23,0.277,24,0.356,27,1.257,29,0.017,30,0.017,45,0.741,51,0.666,57,0.452,58,1.38,59,0.741,60,0.509,61,0.844,62,0.574,63,0.741,64,0.951,65,2.902,66,2.206,67,0.522,68,1.008,69,1.008,70,1.228,71,1.418,72,1.008,73,1.257,74,0.459,75,1.008,76,0.951,77,0.574,78,1.38,79,1.008,80,2.755,81,0.951,82,0.855,83,0.741,84,1.418,85,1.228,86,1.83,87,0.65,88,0.741,89,1.228,90,0.855,91,1.83,92,0.855,93,0.741,94,0.855,95,1.418,96,0.855,97,0.741,98,0.452,99,0.844,100,0.509,101,1.228,102,0.855,103,1.008,104,1.816,105,1.228,106,2.188,107,0.855,108,0.855,109,1.008,110,2.333,111,1.008,112,2.64,113,1.008,114,1.008,115,0.855,116,1.008,117,2.798,118,1.008,119,1.008,120,2.927,121,1.008,122,2.49,123,2.76,124,2.76,125,1.008,126,1.008,127,2.342,128,0.844,129,1.671,130,1.228,131,1.671,132,1.671,133,1.008,134,1.008,135,1.008,136,0.855,137,0.741,138,1.008,139,1.008,140,2.76,141,3.152,142,1.008,143,1.008,144,1.008,145,1.008,146,1.008,147,2.49,148,1.008,149,1.008,150,1.008,151,2.14,152,1.008,153,2.14,154,2.14,155,2.76,156,1.671,157,1.008,158,1.008,159,2.14,160,1.008,161,1.008,162,1.816,163,2.14,164,2.14,165,2.515,166,1.008,167,1.008,168,2.76,169,1.671,170,1.671,171,1.008,172,2.76,173,1.008,174,1.008,175,1.671,176,1.008,177,1.008,178,1.671,179,1.008,180,2.49,181,1.008,182,1.008,183,1.008,184,1.008,185,1.008,186,0.855,187,1.008,188,1.008,189,0.65,190,0.509,191,1.008,192,1.671,193,1.008,194,1.671,195,1.671,196,1.671,197,2.342,198,1.008,199,1.418,200,1.008,201,1.008,202,1.008,203,1.008,204,1.008,205,0.574,206,1.008,207,1.008,208,1.008,209,0.741,210,0.855,211,1.008,212,1.008,213,1.008,214,1.008,215,1.008,216,1.008,217,1.008,218,1.008,219,0.855,220,1.008,221,1.671,222,2.14,223,1.008,224,1.008,225,1.008,226,0.855,227,1.228,228,1.008,229,1.008,230,1.008,231,1.008,232,1.671,233,1.671,234,1.008,235,1.008,236,1.008,237,1.008,238,1.008,239,1.008,240,1.008,241,1.008]],["title/interfaces/ITitledDocumentInfo.html",[57,1.047,73,1.178]],["body/interfaces/ITitledDocumentInfo.html",[3,0.616,4,0.711,5,0.767,9,0.616,13,0.046,17,1.44,23,0.814,29,0.037,30,0.037,57,1.329,59,2.178,64,2.1,67,1.411,73,1.862,74,0.814,219,2.513,242,2.962,243,4.201,244,4.201,245,3.564,246,4.201,247,5.169,248,2.962,249,2.962,250,2.962,251,2.962,252,2.962,253,2.962]],["title/interfaces/ITokenResponse.html",[57,1.047,254,1.505]],["body/interfaces/ITokenResponse.html",[3,0.708,4,0.817,5,0.708,9,0.708,13,0.044,17,1.332,23,0.936,29,0.04,30,0.04,57,1.527,59,2.503,64,2.284,67,1.063,74,0.936,254,2.586,255,3.405,256,3.238]],["title/controllers/MkgtOfficialBotController.html",[0,1.178,257,1.716]],["body/controllers/MkgtOfficialBotController.html",[0,1.862,2,1.496,3,0.616,4,0.711,5,0.616,9,0.616,10,1.862,12,2.513,13,0.047,14,1.496,16,1.329,18,1.152,19,0.814,23,0.814,24,1.047,25,2.513,26,2.513,29,0.037,30,0.037,60,1.862,61,2.182,62,2.1,100,2.027,101,2.178,128,1.496,199,2.513,257,2.711,258,2.962,259,4.536,260,3.644,261,3.644,262,3.644,263,1.687,264,1.687,265,4.939,266,2.962,267,2.513,268,2.962,269,2.962,270,3.644,271,3.644,272,3.644,273,3.644,274,3.644,275,3.644]],["title/modules/MkgtOfficialBotModule.html",[31,1.329,276,1.716]],["body/modules/MkgtOfficialBotModule.html",[2,1.865,3,0.617,4,0.713,5,0.617,13,0.046,18,1.314,19,0.816,23,0.816,24,1.05,29,0.037,30,0.037,31,2.103,33,1.691,34,2.103,37,2.715,38,2.184,39,2.184,41,3.134,48,2.52,60,1.865,61,2.184,62,1.691,100,2.226,257,2.955,268,3.694,269,2.97,276,3.241,277,2.97,278,2.97,279,3.654,280,2.97,281,2.52,282,3.654,283,2.97,284,2.97,285,3.654]],["title/injectables/MkgtOfficialBotService.html",[51,0.93,100,1.178]],["body/injectables/MkgtOfficialBotService.html",[3,0.465,4,0.204,5,0.177,9,0.302,10,0.732,13,0.048,14,1.471,16,1.003,17,0.783,18,0.91,19,0.234,23,0.234,24,0.301,27,1.129,29,0.014,30,0.014,45,1.393,47,0.723,51,0.578,52,0.626,57,0.382,58,0.935,60,1.549,61,1.903,62,1.747,63,0.626,64,0.826,65,2.316,66,1.76,67,0.592,68,0.852,69,0.852,70,1.066,71,1.231,72,0.852,73,1.267,74,0.399,75,0.852,76,0.826,77,0.485,78,1.76,79,0.852,80,2.719,81,0.826,82,0.723,83,0.626,84,1.231,85,1.644,86,2.007,87,0.549,88,0.626,89,1.066,90,0.723,91,1.644,92,0.723,93,0.626,94,0.723,95,1.231,96,0.723,97,0.626,98,0.382,99,0.957,100,0.732,101,1.393,102,1.231,103,1.45,104,1.897,105,1.644,106,2.141,107,1.607,108,1.607,109,1.45,110,2.492,111,2.236,112,2.59,113,0.852,114,0.852,115,0.723,116,0.852,117,2.603,118,0.852,119,0.852,120,2.808,121,0.852,122,2.236,123,2.508,124,2.729,125,0.852,126,0.852,127,2.128,128,1.129,129,1.45,130,1.066,131,1.45,132,1.45,133,0.852,134,0.852,135,0.852,136,0.723,137,0.626,138,0.852,139,0.852,140,2.729,141,3.068,142,0.852,143,0.852,144,0.852,145,0.852,146,0.852,147,2.236,148,0.852,149,0.852,150,0.852,151,1.894,152,0.852,153,1.894,154,1.894,155,2.508,156,1.45,157,0.852,158,0.852,159,1.894,160,0.852,161,0.852,162,1.607,163,1.894,164,1.894,165,2.728,166,0.852,167,0.852,168,2.508,169,1.894,170,1.45,171,0.852,172,2.508,173,0.852,174,0.852,175,1.45,176,0.852,177,0.852,178,1.45,179,0.852,180,2.236,181,0.852,182,0.852,183,0.852,184,0.852,185,0.852,186,0.723,187,0.852,188,0.852,189,0.549,190,0.43,191,0.852,192,1.45,193,0.852,194,1.45,195,1.45,196,1.45,197,2.316,198,0.852,199,1.231,200,0.852,201,2.236,202,0.852,203,1.45,204,1.894,205,0.826,206,0.852,207,0.852,208,0.852,209,0.626,210,0.723,211,0.852,212,0.852,213,0.852,214,0.852,215,0.852,216,0.852,217,0.852,218,1.45,219,1.607,220,0.852,221,1.894,222,2.236,223,1.45,224,1.894,225,1.45,226,1.231,227,1.644,228,1.45,229,1.45,230,1.45,231,1.45,232,2.236,233,2.236,234,1.45,235,1.45,236,1.45,237,1.45,238,1.45,239,1.45,240,1.45,241,1.45,263,0.826,264,0.826,266,0.852,286,1.784,287,1.784,288,1.048,289,0.723,290,1.048,291,1.784,292,1.048,293,1.048,294,1.894,295,1.894,296,1.048,297,1.048,298,1.048,299,1.048]],["title/controllers/MkgtruApiController.html",[0,1.178,300,1.716]],["body/controllers/MkgtruApiController.html",[0,0.615,2,0.615,3,0.253,4,0.292,5,0.253,9,0.253,10,0.984,12,3.01,13,0.047,14,1.791,16,1.843,17,1.306,18,1.066,19,0.335,23,0.536,24,0.984,25,1.033,26,1.033,27,1.724,29,0.019,30,0.019,66,1.257,67,0.952,73,0.615,74,1.005,76,1.11,77,0.693,78,2.359,80,1.257,81,1.851,86,1.433,87,1.257,88,1.433,98,0.546,99,0.984,110,2.842,112,0.785,115,1.654,120,1.433,128,1.971,130,2.048,137,2.39,165,2.39,186,2.068,189,1.796,190,1.642,205,2.34,209,0.895,254,0.785,256,2.241,263,1.736,264,1.736,267,1.033,289,1.033,300,2.048,301,2.083,302,1.218,303,1.498,304,2.398,305,2.87,306,3.548,307,2.398,308,2.398,309,2.398,310,2.786,311,1.949,312,2.998,313,2.786,314,1.949,315,1.949,316,2.398,317,1.498,318,1.498,319,1.498,320,2.398,321,2.398,322,2.398,323,4,324,1.498,325,1.498,326,3.427,327,3.427,328,2.364,329,1.218,330,1.498,331,1.498,332,2.398,333,1.498,334,1.498,335,1.949,336,1.498,337,1.498,338,1.949,339,2.398,340,1.218,341,1.498,342,1.498,343,1.498,344,1.498,345,1.498,346,2.398,347,1.498,348,1.498,349,1.498,350,1.949,351,2.398,352,2.398,353,1.498,354,1.498,355,1.498,356,1.498,357,1.218,358,1.498,359,1.498,360,1.498,361,1.498,362,1.498,363,1.498,364,1.388,365,1.218,366,0.895,367,1.498,368,0.895,369,1.498,370,1.218,371,1.218,372,1.218,373,3.659,374,2.998,375,1.498,376,2.998,377,1.498,378,1.498,379,1.498,380,3.251,381,1.498,382,3.414,383,1.498,384,2.398,385,4.2,386,1.498,387,1.498,388,1.498,389,1.498,390,1.498,391,1.498,392,1.498,393,1.218,394,1.218,395,1.498,396,1.498,397,1.498,398,1.498,399,2.398,400,1.498,401,1.498,402,1.498,403,1.498,404,1.498,405,1.498,406,1.498,407,1.498,408,1.498,409,1.498,410,1.498,411,2.398,412,1.498,413,1.498,414,1.498,415,1.498,416,1.498,417,1.498,418,1.498,419,1.498,420,1.498,421,1.498]],["title/modules/MkgtruApiModule.html",[31,1.329,422,1.716]],["body/modules/MkgtruApiModule.html",[2,1.865,3,0.617,4,0.713,5,0.617,13,0.047,18,1.314,19,0.816,23,0.816,24,1.05,29,0.037,30,0.037,31,2.103,33,1.691,34,2.103,37,2.715,38,2.184,39,2.184,41,3.134,48,2.52,74,1.015,189,2.381,280,2.97,281,2.52,283,2.97,284,2.97,300,2.955,301,1.691,364,2.511,365,2.97,422,3.241,423,2.97,424,2.97,425,3.654,426,3.654,427,3.654,428,3.654,429,3.654]],["title/injectables/MkgtruApiService.html",[51,0.93,364,1.329]],["body/injectables/MkgtruApiService.html",[3,0.54,4,0.259,5,0.368,9,0.595,10,0.893,13,0.048,14,1.553,16,1.75,17,1.275,18,1.059,19,0.297,23,0.297,24,0.381,27,1.712,29,0.018,30,0.018,51,0.704,52,0.794,67,0.895,70,1.3,73,0.545,74,0.892,76,1.279,77,0.615,78,2.262,80,2.745,85,1.3,87,1.14,98,0.793,99,1.712,105,0.794,106,1.3,110,2.796,112,2.328,127,1.5,128,1.64,130,1.908,136,0.916,137,1.908,162,0.916,165,2.261,205,2.381,227,1.3,243,1.08,244,1.08,245,0.916,246,1.08,248,1.08,249,1.08,250,1.08,251,1.08,252,1.08,253,1.08,254,0.696,256,2.654,263,1.478,264,1.478,267,0.916,289,1.5,301,1.849,305,2.654,306,1.768,310,2.596,311,1.768,313,2.596,314,1.768,315,1.768,328,0.916,329,1.768,338,2.596,340,1.768,350,1.768,357,1.08,364,1.007,370,1.08,371,1.08,372,1.08,373,3.39,380,3.39,382,3.509,393,1.768,394,2.246,430,0.794,431,2.175,432,1.328,433,1.328,434,2.175,435,2.175,436,1.328,437,2.175,438,1.328,439,1.328,440,2.175,441,3.194,442,1.328,443,2.175,444,1.328,445,2.175,446,2.175,447,1.328,448,1.5,449,1.768,450,1.08,451,2.246,452,1.328,453,1.328,454,1.3,455,1.08,456,1.328,457,1.328,458,1.328,459,1.328,460,1.328,461,1.328,462,2.762,463,1.328,464,1.328,465,2.175,466,3.194,467,3.194,468,3.194,469,3.194,470,3.784,471,3.784,472,1.328,473,4.643,474,1.328,475,2.175,476,1.328,477,1.328,478,1.328,479,3.995,480,1.328,481,2.175,482,1.328,483,3.194,484,2.175,485,2.596,486,2.175,487,2.175,488,2.175,489,1.328,490,1.328,491,1.08,492,1.08,493,1.328,494,1.08,495,1.768,496,1.08,497,1.328,498,1.328,499,1.328,500,2.175,501,2.762,502,2.762,503,1.328,504,1.328,505,1.328,506,1.328,507,1.08,508,1.328,509,1.08,510,2.175,511,1.328,512,1.328,513,1.328,514,1.328,515,2.175,516,1.328,517,1.328,518,1.328,519,1.328,520,1.328,521,1.328,522,1.328,523,1.328,524,1.328,525,1.328,526,1.328,527,1.328,528,1.328,529,1.328]],["title/guards/RequireApiKeyGuard.html",[366,1.716,530,1.98]],["body/guards/RequireApiKeyGuard.html",[3,0.546,4,0.631,5,0.546,9,0.546,10,1.725,13,0.047,14,1.327,16,1.179,17,0.821,18,1.186,19,0.722,23,0.722,24,0.928,27,1.725,29,0.034,30,0.034,51,1.361,67,0.821,74,0.939,76,1.946,77,1.496,80,2.754,98,1.179,99,1.327,102,2.229,110,2.448,112,1.694,117,2.899,120,2.512,128,1.725,190,2.104,197,2.229,205,1.946,209,1.932,210,2.229,256,2.791,263,1.496,264,1.496,366,2.512,368,2.512,531,3.233,532,2.899,533,2.229,534,5.126,535,3.233,536,4.945,537,3.233,538,3.233,539,2.628,540,3.233,541,3.233,542,3.233,543,3.233,544,3.233,545,3.233,546,3.233,547,3.233,548,3.233,549,3.233]],["title/coverage.html",[550,3.158]],["body/coverage.html",[0,1.711,1,1.546,5,0.437,6,2.185,7,2.161,8,2.102,13,0.046,20,1.197,21,1.546,29,0.029,30,0.029,51,1.35,53,2.102,57,1.52,58,1.355,60,2.201,61,2.319,62,2.455,63,3.129,67,0.657,73,1.062,74,1.185,81,1.197,83,1.546,89,1.546,91,1.546,93,1.546,97,1.546,98,1.318,99,1.062,100,1.062,105,3.367,190,1.853,227,2.839,242,2.102,254,1.355,255,2.102,257,1.546,258,2.102,300,1.546,301,2.199,302,2.102,364,1.197,366,1.546,368,2.161,430,2.698,454,1.546,530,1.784,532,2.494,533,2.494,550,2.102,551,2.586,552,2.586,553,4.75,554,2.102,555,3.389,556,5.41,557,2.102,558,2.586,559,2.586,560,5.237,561,2.102,562,4.169,563,2.586,564,2.586,565,2.586,566,2.102,567,3.616,568,2.102,569,2.586,570,2.586,571,2.586]],["title/dependencies.html",[34,1.594,572,1.962]],["body/dependencies.html",[13,0.047,19,0.844,29,0.037,30,0.037,34,1.748,44,3.07,45,2.257,70,2.257,71,2.605,77,1.748,81,1.748,98,1.377,281,2.605,448,3.198,449,3.07,450,3.07,454,2.257,539,3.07,573,5.019,574,3.777,575,3.777,576,3.777,577,3.777,578,3.777,579,4.638,580,3.777,581,3.777,582,3.777,583,3.777,584,3.777,585,3.777,586,3.777,587,3.777,588,3.777,589,3.777,590,3.777,591,3.777,592,3.777,593,3.777,594,3.777,595,3.777]],["title/miscellaneous/functions.html",[596,1.117,597,2.799]],["body/miscellaneous/functions.html",[3,0.619,6,1.92,9,0.619,13,0.044,16,1.66,17,1.315,29,0.037,30,0.037,60,1.504,61,1.504,67,1.156,74,1.017,128,1.868,205,2.107,263,2.107,264,2.107,301,1.696,305,2.72,328,2.527,430,2.959,448,2.527,451,3.7,485,3.7,491,2.978,492,2.978,494,2.978,495,3.7,496,2.978,507,2.978,509,2.978,554,2.978,555,4.558,557,2.978,561,2.978,566,3.7,568,3.7,596,1.696,597,2.978,598,4.951,599,3.7]],["title/index.html",[9,0.408,101,1.443,305,1.443]],["body/index.html",[13,0.047,21,2.944,29,0.04,30,0.04,108,2.88,189,2.188,190,2.022,245,2.88,335,3.394,600,4.176,601,4.176,602,4.176,603,4.176]],["title/modules.html",[33,1.798]],["body/modules.html",[13,0.04,29,0.04,30,0.04,32,2.567,33,1.988,276,2.567,422,2.567,604,5.302,605,5.302,606,5.302,607,5.302]],["title/overview.html",[608,3.158]],["body/overview.html",[2,1.604,13,0.044,20,2.358,29,0.038,30,0.038,32,3.165,33,1.809,34,2.192,35,3.177,36,3.177,37,2.83,38,2.336,39,2.336,52,2.336,59,2.336,100,2.091,226,2.696,276,3.165,277,3.177,278,3.177,364,2.358,422,3.165,423,3.177,424,3.177,530,2.696,608,3.177,609,5.296]],["title/properties.html",[64,1.594,572,1.962]],["body/properties.html",[13,0.045,29,0.04,30,0.04,47,2.962,64,1.988,66,2.251,107,2.962,610,4.296,611,4.296,612,4.296,613,4.296,614,4.296,615,4.296,616,4.296,617,4.296]],["title/miscellaneous/typealiases.html",[596,1.117,618,3.444]],["body/miscellaneous/typealiases.html",[9,0.735,13,0.043,29,0.041,30,0.041,67,1.105,74,0.972,78,2.645,104,3.001,106,2.6,596,2.014,619,4.351,620,4.351,621,4.351]],["title/miscellaneous/variables.html",[596,1.117,622,2.799]],["body/miscellaneous/variables.html",[9,0.494,13,0.047,17,1.128,29,0.032,30,0.032,58,1.532,60,1.2,61,2.207,62,1.353,63,3.171,65,3.421,66,2.599,67,1.207,74,0.878,76,1.82,81,2.057,82,2.016,83,2.35,84,2.016,85,1.747,86,1.747,87,1.532,88,1.747,89,2.35,90,2.016,91,2.35,92,2.016,93,2.35,94,2.016,95,2.712,96,2.016,97,2.35,98,1.733,99,1.614,190,1.824,294,4.37,295,4.37,301,1.353,368,1.747,430,2.35,454,2.35,455,2.377,532,2.016,533,2.712,596,1.353,599,2.377,622,2.377,623,5.22,624,2.924]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":105,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":611,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":226,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"overview.html":{}}}],["1.3.4",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":96,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["11:05:44",{"_index":375,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["11:36:53",{"_index":419,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["11:48:18",{"_index":388,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["12:16:08",{"_index":381,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["12:17:24",{"_index":397,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["12:20:04",{"_index":401,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["12:24:47",{"_index":408,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["12:25:00",{"_index":413,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["1632589047342",{"_index":482,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1632589047343",{"_index":480,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1643455125006",{"_index":474,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1643455125007",{"_index":472,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1643621942381",{"_index":477,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1646804333482",{"_index":490,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:04:23",{"_index":405,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["1:22:12",{"_index":456,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:22:34",{"_index":461,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:22:52",{"_index":464,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:23:02",{"_index":476,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:24:07",{"_index":478,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:24:51",{"_index":489,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:25:10",{"_index":493,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["1:25:23",{"_index":508,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["2",{"_index":94,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["2.1.1",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":500,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["3",{"_index":609,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["3/13/2023",{"_index":374,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["3/14/2023",{"_index":380,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["4.11.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["4.12.2",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["5.76.1",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["6.1.5",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":95,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["80000",{"_index":214,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["85",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["_check_changes_interval",{"_index":93,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["_document_error",{"_index":97,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["_line_break",{"_index":89,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["_line_break}/practice",{"_index":145,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["_row_break",{"_index":91,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["account",{"_index":350,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["addon",{"_index":471,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["aliases",{"_index":619,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api",{"_index":190,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api.controller",{"_index":427,"title":{},"body":{"modules/MkgtruApiModule.html":{}}}],["api.controller.ts",{"_index":302,"title":{},"body":{"controllers/MkgtruApiController.html":{},"coverage.html":{}}}],["api.controller.ts:103",{"_index":334,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:117",{"_index":345,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:135",{"_index":349,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:149",{"_index":325,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:39",{"_index":331,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:53",{"_index":319,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:75",{"_index":337,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.controller.ts:91",{"_index":342,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["api.module.ts",{"_index":425,"title":{},"body":{"modules/MkgtruApiModule.html":{}}}],["api.onrender.com",{"_index":613,"title":{},"body":{"properties.html":{}}}],["api.service",{"_index":365,"title":{},"body":{"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{}}}],["api.service.ts",{"_index":430,"title":{},"body":{"injectables/MkgtruApiService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["api.service.ts:104",{"_index":442,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["api.service.ts:124",{"_index":439,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["api.service.ts:25",{"_index":433,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["api.service.ts:51",{"_index":444,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["api.service.ts:77",{"_index":438,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["api.service.ts:90",{"_index":436,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["api/.env",{"_index":428,"title":{},"body":{"modules/MkgtruApiModule.html":{}}}],["api/src/main.ts",{"_index":561,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["api/src/mkgtru",{"_index":301,"title":{},"body":{"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["api/src/require",{"_index":532,"title":{},"body":{"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/src/types/ititleddocumentinfo",{"_index":75,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["api/src/types/ititleddocumentinfo.ts",{"_index":242,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"coverage.html":{}}}],["api/src/types/territories",{"_index":79,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["api/src/types/territories.ts",{"_index":621,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api/src/types/tokenobject.ts",{"_index":255,"title":{},"body":{"interfaces/ITokenResponse.html":{},"coverage.html":{}}}],["apps/.../main.ts",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../mkgt",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../mkgtru",{"_index":599,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../require",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../territories.ts",{"_index":620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/documentation",{"_index":6,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/mkgt",{"_index":60,"title":{},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/mkgtru",{"_index":74,"title":{},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array",{"_index":338,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["assert",{"_index":69,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["async",{"_index":110,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["audiences",{"_index":327,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["auditories",{"_index":437,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["authheader",{"_index":545,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["authheader?.replace(\"bearer",{"_index":548,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["author",{"_index":615,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":210,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["available",{"_index":440,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["await",{"_index":112,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["axios",{"_index":70,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"dependencies.html":{}}}],["axios.get(`http://${process.env.site_domain}${linktofile",{"_index":513,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["axios.get(uri",{"_index":498,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["axios.get(url",{"_index":208,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["bearer",{"_index":211,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["bearertoken",{"_index":323,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["bearertoken.replace(\"bearer",{"_index":391,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["body",{"_index":353,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["body(\"email",{"_index":416,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["body(\"surname",{"_index":417,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["bootstrap",{"_index":555,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bot",{"_index":108,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"index.html":{}}}],["bot.controller",{"_index":282,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{}}}],["bot.controller.ts",{"_index":258,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"coverage.html":{}}}],["bot.controller.ts:14",{"_index":262,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["bot.module.ts",{"_index":279,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{}}}],["bot.service",{"_index":269,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{}}}],["bot.service.ts",{"_index":63,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bot.service.ts:234",{"_index":293,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot.service.ts:238",{"_index":288,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot.service.ts:249",{"_index":290,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot.service.ts:265",{"_index":297,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot.service.ts:33",{"_index":299,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot.service.ts:41",{"_index":296,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot.service.ts:43",{"_index":292,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["bot/.env",{"_index":285,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{}}}],["bot/src/main.ts",{"_index":557,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bot/src/mkgt",{"_index":62,"title":{},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["broken",{"_index":191,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["browse",{"_index":607,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":604,"title":{},"body":{"modules.html":{}}}],["buffer.from(htmlviewcode).tostring('base64",{"_index":522,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["buttons",{"_index":178,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["buttons[index",{"_index":180,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["by\":\"students",{"_index":600,"title":{},"body":{"index.html":{}}}],["cache",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["cacheinterceptor",{"_index":354,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["cachekey",{"_index":355,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["cachemodule",{"_index":426,"title":{},"body":{"modules/MkgtruApiModule.html":{}}}],["cachemodule.register",{"_index":429,"title":{},"body":{"modules/MkgtruApiModule.html":{}}}],["cachettl",{"_index":356,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["cachettl(18000",{"_index":399,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["cachettl(200",{"_index":384,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["callback",{"_index":192,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["callback_data",{"_index":156,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["canactivate",{"_index":534,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["canactivate(context",{"_index":535,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["catch",{"_index":140,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["changes",{"_index":85,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"miscellaneous/variables.html":{}}}],["changeschecker",{"_index":224,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["changesdocinfo",{"_index":231,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["changesdocinfo.last_modified.timestamp",{"_index":232,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["changestimestamp",{"_index":103,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["checking",{"_index":183,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["checkupdatechanges(\"kuchin",{"_index":228,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["checkupdatechanges(\"lublino",{"_index":229,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["checkupdatechanges(territory",{"_index":230,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["class",{"_index":24,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["cluster_documentationstaticmodule",{"_index":35,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"overview.html":{}}}],["cluster_documentationstaticmodule_providers",{"_index":36,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"overview.html":{}}}],["cluster_mkgtofficialbotmodule",{"_index":277,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{},"overview.html":{}}}],["cluster_mkgtofficialbotmodule_providers",{"_index":278,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{},"overview.html":{}}}],["cluster_mkgtruapimodule",{"_index":423,"title":{},"body":{"modules/MkgtruApiModule.html":{},"overview.html":{}}}],["cluster_mkgtruapimodule_providers",{"_index":424,"title":{},"body":{"modules/MkgtruApiModule.html":{},"overview.html":{}}}],["college",{"_index":307,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["command",{"_index":65,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["commands",{"_index":83,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":280,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}}}],["configmodule.forroot",{"_index":283,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}}}],["console.log",{"_index":122,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["console.log(\"bot_started",{"_index":271,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["console.log(\"changes",{"_index":240,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["console.log(typeof",{"_index":142,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["const",{"_index":80,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"controllers/MkgtOfficialBotController.html":{},"controllers/MkgtruApiController.html":{}}}],["context",{"_index":117,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["context.answercbquery",{"_index":195,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.from",{"_index":119,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.reply",{"_index":166,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.reply(messagetext",{"_index":152,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.sendmessage",{"_index":170,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.sendmessage(_document_error",{"_index":175,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.sendmessage(`${sender.first_name",{"_index":143,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.sendmessage(resp",{"_index":188,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["context.switchtohttp().getrequest().headers",{"_index":544,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/DocumentationStaticController.html":{},"controllers/MkgtOfficialBotController.html":{},"controllers/MkgtruApiController.html":{}},"body":{"controllers/DocumentationStaticController.html":{},"controllers/MkgtOfficialBotController.html":{},"controllers/MkgtruApiController.html":{},"coverage.html":{}}}],["controller(\"mkgtru",{"_index":378,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"overview.html":{}}}],["coverage",{"_index":550,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createaccount",{"_index":431,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["createaccount(name",{"_index":432,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["createaccount(name:string",{"_index":457,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["creating",{"_index":434,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["cuid",{"_index":454,"title":{},"body":{"injectables/MkgtruApiService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cuid()}70qy00011${cuid",{"_index":463,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["data",{"_index":127,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{}}}],["data:text/html;base64,${htmlviewbase64",{"_index":529,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["data_type",{"_index":243,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["database",{"_index":435,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["datatype",{"_index":515,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["date",{"_index":373,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["date(documentresponse.headers['last",{"_index":518,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["db",{"_index":446,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"controllers/MkgtOfficialBotController.html":{},"controllers/MkgtruApiController.html":{}}}],["default",{"_index":294,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["delete",{"_index":363,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["delete(\"profile",{"_index":389,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["delete('profile')@useguards(requireapikeyguard",{"_index":318,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["deleteprofile",{"_index":309,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["deleteprofile(@headers(\"authorization",{"_index":390,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["deleteprofile(bearertoken",{"_index":317,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["deletes",{"_index":320,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":66,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["descriptions",{"_index":339,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["distribution",{"_index":326,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["div",{"_index":473,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["doc",{"_index":168,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["doc?.last_modified.ru",{"_index":171,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["doc?.links.file",{"_index":173,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["doc?.links.views.google_docs",{"_index":174,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["doc?.map((document",{"_index":179,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["document",{"_index":328,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["document.links.views.google_docs",{"_index":182,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["document.title",{"_index":181,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["documentation",{"_index":21,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"coverage.html":{},"index.html":{}}}],["documentationstaticcontroller",{"_index":1,"title":{"controllers/DocumentationStaticController.html":{}},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"coverage.html":{}}}],["documentationstaticmodule",{"_index":32,"title":{"modules/DocumentationStaticModule.html":{}},"body":{"modules/DocumentationStaticModule.html":{},"modules.html":{},"overview.html":{}}}],["documentationstaticservice",{"_index":20,"title":{"injectables/DocumentationStaticService.html":{}},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"coverage.html":{},"overview.html":{}}}],["documentresponse",{"_index":512,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["documentresponse.headers['content",{"_index":516,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["documentresponse.status",{"_index":514,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["element",{"_index":485,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["email",{"_index":137,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["email:string):promise",{"_index":459,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["en",{"_index":249,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["envfilepath",{"_index":284,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}}}],["error",{"_index":141,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["example",{"_index":602,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":536,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["express",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":102,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{}}}],["files",{"_index":483,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["files.push(await",{"_index":487,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["first",{"_index":351,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["for\":\"students",{"_index":601,"title":{},"body":{"index.html":{}}}],["function",{"_index":227,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"coverage.html":{}}}],["functions",{"_index":597,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(\"/status",{"_index":272,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["get(\"auditories",{"_index":420,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get(\"changes",{"_index":383,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get(\"practicelist",{"_index":398,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get(\"status",{"_index":406,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get(\"timetables",{"_index":402,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get('/status",{"_index":261,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["get('auditories')@cachettl(200)@useguards(requireapikeyguard",{"_index":324,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get('changes')@cachettl(200)@useguards(requireapikeyguard",{"_index":330,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get('practicelist')@cachettl(18000)@useguards(requireapikeyguard",{"_index":336,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get('status",{"_index":333,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["get('timetables')@cachettl(18000)@useguards(requireapikeyguard",{"_index":341,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["getapiresponse",{"_index":286,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["getapiresponse(path",{"_index":203,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["getauditories",{"_index":310,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["getbotdialog",{"_index":259,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["getbotdialog(@res",{"_index":273,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["getbotdialog(res",{"_index":260,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["getchanges",{"_index":311,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["getchanges(@query(\"territory",{"_index":386,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["getchanges(territory",{"_index":329,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["getelementsfrompage",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getelementsfrompage(`https://${process.env.site_domain}/index.php/nauka/raspisania",{"_index":466,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["getelementsfrompage(uri",{"_index":496,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":11,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{}}}],["getping",{"_index":312,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["getping():\"ok",{"_index":407,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["getpracticelist",{"_index":313,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["gettimetables",{"_index":314,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["gettimetables(@query(\"territory",{"_index":403,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["gettimetables(territory",{"_index":340,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["getting",{"_index":305,"title":{"index.html":{}},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["gettitledfileinfobyatag",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettitledfileinfobyatag(element",{"_index":488,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["gettitledfileinfobyatag(linkelement[0",{"_index":475,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["gettitledfileinfobyatag(node",{"_index":509,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["getuser",{"_index":287,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["getuser(tgid",{"_index":218,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["go",{"_index":55,"title":{},"body":{"injectables/DocumentationStaticService.html":{}}}],["google_docs",{"_index":252,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["guard",{"_index":530,"title":{"guards/RequireApiKeyGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":531,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["headers",{"_index":209,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"guards/RequireApiKeyGuard.html":{}}}],["headers[keyname",{"_index":547,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["html",{"_index":449,"title":{},"body":{"injectables/MkgtruApiService.html":{},"dependencies.html":{}}}],["htmlelement",{"_index":451,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["htmlviewbase64",{"_index":521,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["htmlviewcode",{"_index":520,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["httpexception",{"_index":357,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["httpexception(\"deleted",{"_index":395,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["httpexception('internal_server_error",{"_index":501,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["https://${process.env.site_domain}${linktofile",{"_index":527,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["https://docs.google.com/gview?url=https://${process.env.site_domain}${linktofile}&embed=true",{"_index":528,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["https://github.com/alexc",{"_index":616,"title":{},"body":{"properties.html":{}}}],["https://mkgtru",{"_index":612,"title":{},"body":{"properties.html":{}}}],["httpstatus",{"_index":267,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["httpstatus.internal_server_error",{"_index":502,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["httpstatus.ok",{"_index":396,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["ibotcommand",{"_index":58,"title":{"interfaces/IBotCommand.html":{}},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifer",{"_index":163,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["identifier",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["ifromkuchin",{"_index":157,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["ifromlublino",{"_index":158,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["implements",{"_index":540,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["import",{"_index":18,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}}}],["include",{"_index":221,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":56,"title":{},"body":{"injectables/DocumentationStaticService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["information",{"_index":306,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["injectable",{"_index":51,"title":{"injectables/DocumentationStaticService.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{}},"body":{"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":52,"title":{},"body":{"injectables/DocumentationStaticService.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"overview.html":{}}}],["inline_keyboard",{"_index":154,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["interface",{"_index":57,"title":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{}},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{}}}],["interfaces",{"_index":59,"title":{},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"overview.html":{}}}],["ititleddocumentinfo",{"_index":73,"title":{"interfaces/ITitledDocumentInfo.html":{}},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"coverage.html":{}}}],["itokenresponse",{"_index":254,"title":{"interfaces/ITokenResponse.html":{}},"body":{"interfaces/ITokenResponse.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"coverage.html":{}}}],["izmenenia",{"_index":467,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["join",{"_index":46,"title":{},"body":{"modules/DocumentationStaticModule.html":{}}}],["key",{"_index":542,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["key.guard",{"_index":369,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["key.guard.ts",{"_index":533,"title":{},"body":{"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["key.guard.ts:9",{"_index":537,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["key/require",{"_index":368,"title":{},"body":{"controllers/MkgtruApiController.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keyname",{"_index":541,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["kuchin",{"_index":104,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/typealiases.html":{}}}],["last_modified",{"_index":244,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["lastmodifieddate",{"_index":517,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["lastmodifieddate.gettime",{"_index":526,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["lastmodifieddate.tolocalestring('en",{"_index":525,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["lastmodifieddate.tolocalestring('ru",{"_index":524,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["license",{"_index":614,"title":{},"body":{"properties.html":{}}}],["link",{"_index":603,"title":{},"body":{"index.html":{}}}],["linkelement",{"_index":465,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["linkelements",{"_index":479,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["linkelements.length",{"_index":506,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["linkelements[index",{"_index":486,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["links",{"_index":245,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{},"index.html":{}}}],["linktofile",{"_index":510,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["literal",{"_index":247,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{}}}],["local_html",{"_index":253,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["lublino",{"_index":106,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{},"miscellaneous/typealiases.html":{}}}],["manager",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["match",{"_index":68,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":114,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["messagetext",{"_index":148,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["metadata",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["miscellaneous",{"_index":596,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkgt",{"_index":268,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{}}}],["mkgtofficialbotcontroller",{"_index":257,"title":{"controllers/MkgtOfficialBotController.html":{}},"body":{"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"coverage.html":{}}}],["mkgtofficialbotmodule",{"_index":276,"title":{"modules/MkgtOfficialBotModule.html":{}},"body":{"modules/MkgtOfficialBotModule.html":{},"modules.html":{},"overview.html":{}}}],["mkgtofficialbotservice",{"_index":100,"title":{"injectables/MkgtOfficialBotService.html":{}},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"overview.html":{}}}],["mkgtofficialbotservice.info.changestimestamp[territory",{"_index":233,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["mkgtofficialbotservice.info.started",{"_index":199,"title":{},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["mkgtru",{"_index":189,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"index.html":{}}}],["mkgtruapicontroller",{"_index":300,"title":{"controllers/MkgtruApiController.html":{}},"body":{"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"coverage.html":{}}}],["mkgtruapimodule",{"_index":422,"title":{"modules/MkgtruApiModule.html":{}},"body":{"modules/MkgtruApiModule.html":{},"modules.html":{},"overview.html":{}}}],["mkgtruapiservice",{"_index":364,"title":{"injectables/MkgtruApiService.html":{}},"body":{"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"coverage.html":{},"overview.html":{}}}],["mode",{"_index":160,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["modified",{"_index":519,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["module",{"_index":31,"title":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{},"modules.html":{},"overview.html":{}}}],["n",{"_index":90,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["n\\n",{"_index":92,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":128,"title":{},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":281,"title":{},"body":{"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":44,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"dependencies.html":{}}}],["new",{"_index":99,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":462,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["node",{"_index":448,"title":{},"body":{"injectables/MkgtruApiService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["node.getattribute(\"href",{"_index":511,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["node.innertext",{"_index":523,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["node_modules/node",{"_index":452,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["null",{"_index":123,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["number",{"_index":219,"title":{},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["object",{"_index":298,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["object.prototype.hasownproperty.call(linkelements",{"_index":484,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["observable",{"_index":538,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["official",{"_index":61,"title":{},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ok",{"_index":186,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{}}}],["optional",{"_index":264,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{},"overview.html":{}}}],["overview",{"_index":608,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":481,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["package",{"_index":572,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":492,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["pageresponse",{"_index":497,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["pageresponse.status",{"_index":499,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["param",{"_index":382,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["parameters",{"_index":263,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":447,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["parse(pageresponse.data",{"_index":504,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["parser",{"_index":450,"title":{},"body":{"injectables/MkgtruApiService.html":{},"dependencies.html":{}}}],["parser/dist/nodes/html",{"_index":453,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["patch",{"_index":358,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["patch(\"token",{"_index":409,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["patch('token')@useguards(requireapikeyguard",{"_index":344,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["path",{"_index":47,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"injectables/MkgtOfficialBotService.html":{},"properties.html":{}}}],["pm",{"_index":376,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["post",{"_index":362,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["post(\"register",{"_index":414,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["post('register')@useguards(requireapikeyguard",{"_index":348,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["practice",{"_index":87,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"miscellaneous/variables.html":{}}}],["practicelist",{"_index":204,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["prefix",{"_index":303,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["prisma",{"_index":98,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["prisma.$disconnect",{"_index":393,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["prisma.telegramaccount.create",{"_index":126,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["prisma.users.create",{"_index":136,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{}}}],["prisma.users.delete",{"_index":392,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["prisma.users.findfirst",{"_index":220,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["prisma.users.findmany",{"_index":235,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["prisma.users.findunique",{"_index":549,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["prisma.users.update",{"_index":162,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"injectables/MkgtruApiService.html":{}}}],["prisma/client",{"_index":77,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":76,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":107,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"properties.html":{}}}],["process.env.access_token",{"_index":212,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["process.env.mkgt_api_path}${path}?territory=${!!territory",{"_index":206,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["profile",{"_index":88,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"miscellaneous/variables.html":{}}}],["profile${_row_break}/changes",{"_index":144,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["promise",{"_index":205,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":64,"title":{"properties.html":{}},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"injectables/MkgtOfficialBotService.html":{},"properties.html":{}}}],["property",{"_index":543,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["providers",{"_index":41,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{}}}],["query",{"_index":359,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["raspisaniah",{"_index":469,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"controllers/MkgtOfficialBotController.html":{},"controllers/MkgtruApiController.html":{}}}],["reflect",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["registration",{"_index":115,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{}}}],["reply_markup",{"_index":153,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["req_to_api",{"_index":215,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["request",{"_index":322,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["requests",{"_index":304,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["require",{"_index":367,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["require(\"cuid",{"_index":455,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/variables.html":{}}}],["require('node",{"_index":82,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["requireapikeyguard",{"_index":366,"title":{"guards/RequireApiKeyGuard.html":{}},"body":{"controllers/MkgtruApiController.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{}}}],["res",{"_index":265,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["res.status(httpstatus.ok).send(\"bot",{"_index":274,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{},"overview.html":{}}}],["resp",{"_index":185,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["response",{"_index":207,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["response.data",{"_index":217,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["response.statustext",{"_index":216,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["revoketoken",{"_index":315,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["revoketoken(@headers(\"authorization",{"_index":410,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["revoketoken(bearertoken",{"_index":343,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["revoketoken(token",{"_index":443,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["root",{"_index":503,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["root.queryselectorall(selector",{"_index":505,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["rootpath",{"_index":50,"title":{},"body":{"modules/DocumentationStaticModule.html":{}}}],["ru",{"_index":248,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["rxjs",{"_index":539,"title":{},"body":{"guards/RequireApiKeyGuard.html":{},"dependencies.html":{}}}],["schedule",{"_index":81,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["schedule.schedulejob",{"_index":225,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["second",{"_index":352,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["selector",{"_index":495,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["sender",{"_index":118,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["sender.first_name",{"_index":129,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["sender.id",{"_index":133,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["sender.last_name",{"_index":131,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["sender.username",{"_index":135,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["sent",{"_index":321,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["server",{"_index":335,"title":{},"body":{"controllers/MkgtruApiController.html":{},"index.html":{}}}],["servestaticmodule",{"_index":43,"title":{},"body":{"modules/DocumentationStaticModule.html":{}}}],["servestaticmodule.forroot",{"_index":49,"title":{},"body":{"modules/DocumentationStaticModule.html":{}}}],["service",{"_index":275,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["set",{"_index":159,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["show_alert",{"_index":196,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["single",{"_index":491,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"controllers/MkgtOfficialBotController.html":{},"modules/MkgtOfficialBotModule.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"modules/MkgtruApiModule.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["sppb",{"_index":470,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["start",{"_index":84,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["startbot",{"_index":111,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["started",{"_index":101,"title":{"index.html":{}},"body":{"interfaces/IBotCommand.html":{},"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["statements",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":45,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"dependencies.html":{}}}],["static.controller",{"_index":42,"title":{},"body":{"modules/DocumentationStaticModule.html":{}}}],["static.controller.ts",{"_index":8,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"coverage.html":{}}}],["static.controller.ts:9",{"_index":15,"title":{},"body":{"controllers/DocumentationStaticController.html":{}}}],["static.module.ts",{"_index":40,"title":{},"body":{"modules/DocumentationStaticModule.html":{}}}],["static.service",{"_index":22,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{}}}],["static.service.ts",{"_index":53,"title":{},"body":{"injectables/DocumentationStaticService.html":{},"coverage.html":{}}}],["static.service.ts:5",{"_index":54,"title":{},"body":{"injectables/DocumentationStaticService.html":{}}}],["static/src/documentation",{"_index":7,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"modules/DocumentationStaticModule.html":{},"injectables/DocumentationStaticService.html":{},"coverage.html":{}}}],["static/src/main.ts",{"_index":554,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["status",{"_index":86,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"miscellaneous/variables.html":{}}}],["stopbot",{"_index":201,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/DocumentationStaticController.html":{},"injectables/DocumentationStaticService.html":{},"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string):promise",{"_index":411,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["substitutions",{"_index":332,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["support",{"_index":605,"title":{},"body":{"modules.html":{}}}],["surname",{"_index":130,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["surname:string",{"_index":458,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["svg",{"_index":606,"title":{},"body":{"modules.html":{}}}],["table",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":507,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["telegraf",{"_index":71,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"dependencies.html":{}}}],["telegramaccountid",{"_index":138,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["telegrambot",{"_index":72,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["telegrambot(process.env.bot_token",{"_index":109,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["telegramid",{"_index":132,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["territories",{"_index":78,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"miscellaneous/typealiases.html":{}}}],["territory",{"_index":165,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["text",{"_index":155,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["tg",{"_index":125,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["tg.id",{"_index":139,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["tgaccount",{"_index":222,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["tgid",{"_index":223,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["tguserid",{"_index":237,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.action(\"ifromkuchin",{"_index":198,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.action(\"ifromlublino",{"_index":193,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.command(\"changes",{"_index":167,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.command(\"ifromlublino",{"_index":161,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.command(\"practice",{"_index":176,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.command(\"profile",{"_index":146,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.command(\"status",{"_index":184,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.launch",{"_index":200,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.start(async",{"_index":116,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.stop",{"_index":202,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.telegram.sendmessage(tguserid",{"_index":239,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.bot.telegram.setmycommands(commands",{"_index":113,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.documentationstaticservice.gethello",{"_index":28,"title":{},"body":{"controllers/DocumentationStaticController.html":{}}}],["this.getapiresponse(\"/changes",{"_index":169,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.getapiresponse(\"/practicelist",{"_index":177,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.getapiresponse(\"/status",{"_index":187,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.getuser(context.from.id",{"_index":147,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.getuser(context?.from.id",{"_index":194,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.getuser(sender.id",{"_index":121,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["this.mkgtofficialbotservice.startbot",{"_index":270,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{}}}],["this.mkgtruapiservice.createaccount(name,surname,email",{"_index":418,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["this.mkgtruapiservice.getauditories",{"_index":421,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["this.mkgtruapiservice.getchanges(territory",{"_index":387,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["this.mkgtruapiservice.getpracticelist",{"_index":400,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["this.mkgtruapiservice.gettimetables(territory",{"_index":404,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["this.mkgtruapiservice.revoketoken(bearertoken.replace(\"bearer",{"_index":412,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["throw",{"_index":394,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["timeout",{"_index":213,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["timestamp",{"_index":250,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["timetables",{"_index":441,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["title",{"_index":246,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["token",{"_index":256,"title":{},"body":{"interfaces/ITokenResponse.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["token:token",{"_index":460,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["true",{"_index":197,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"guards/RequireApiKeyGuard.html":{}}}],["try",{"_index":124,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["type",{"_index":67,"title":{},"body":{"interfaces/IBotCommand.html":{},"interfaces/ITitledDocumentInfo.html":{},"interfaces/ITokenResponse.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{},"guards/RequireApiKeyGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":618,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":377,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["types/ititleddocumentinfo",{"_index":370,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["types/territories",{"_index":371,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["types/tokenobject",{"_index":372,"title":{},"body":{"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["undefined",{"_index":546,"title":{},"body":{"guards/RequireApiKeyGuard.html":{}}}],["unknown",{"_index":291,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{}}}],["updated",{"_index":241,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["updateprofile",{"_index":316,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["updateprofile(@body(\"name",{"_index":415,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["updateprofile(name",{"_index":347,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["updates",{"_index":445,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["updating",{"_index":346,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["uri",{"_index":494,"title":{},"body":{"injectables/MkgtruApiService.html":{},"miscellaneous/functions.html":{}}}],["url",{"_index":172,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["useguards",{"_index":360,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["useguards(requireapikeyguard",{"_index":385,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["useinterceptors",{"_index":361,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":379,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["user",{"_index":120,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"guards/RequireApiKeyGuard.html":{}}}],["user.identifer",{"_index":164,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["user.name",{"_index":150,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["user.role",{"_index":149,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["user.territory",{"_index":151,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["user.tgaccount.id",{"_index":238,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["username",{"_index":134,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["users",{"_index":234,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["users.foreach(user",{"_index":236,"title":{},"body":{"interfaces/IBotCommand.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["ux",{"_index":617,"title":{},"body":{"properties.html":{}}}],["v",{"_index":468,"title":{},"body":{"injectables/MkgtruApiService.html":{}}}],["value",{"_index":295,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":622,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":610,"title":{},"body":{"properties.html":{}}}],["views",{"_index":251,"title":{},"body":{"interfaces/ITitledDocumentInfo.html":{},"injectables/MkgtruApiService.html":{}}}],["void",{"_index":266,"title":{},"body":{"controllers/MkgtOfficialBotController.html":{},"injectables/MkgtOfficialBotService.html":{}}}],["webpack",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["website",{"_index":308,"title":{},"body":{"controllers/MkgtruApiController.html":{}}}],["yes",{"_index":289,"title":{},"body":{"injectables/MkgtOfficialBotService.html":{},"controllers/MkgtruApiController.html":{},"injectables/MkgtruApiService.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/DocumentationStaticModule.html":{},"modules/MkgtOfficialBotModule.html":{},"modules/MkgtruApiModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/DocumentationStaticController.html":{"url":"controllers/DocumentationStaticController.html","title":"controller - DocumentationStaticController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentationStaticController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/documentation-static/src/documentation-static.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/documentation-static/src/documentation-static.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { DocumentationStaticService } from './documentation-static.service';\n\n@Controller()\nexport class DocumentationStaticController {\n  constructor(private readonly documentationStaticService: DocumentationStaticService) {}\n\n  @Get()\n  getHello(): string {\n    return this.documentationStaticService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentationStaticModule.html":{"url":"modules/DocumentationStaticModule.html","title":"module - DocumentationStaticModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentationStaticModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DocumentationStaticModule\n\n\n\ncluster_DocumentationStaticModule_providers\n\n\n\n\nDocumentationStaticService\n\nDocumentationStaticService\n\n\n\nDocumentationStaticModule\n\nDocumentationStaticModule\n\nDocumentationStaticModule -->\n\nDocumentationStaticService->DocumentationStaticModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/documentation-static/src/documentation-static.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentationStaticService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentationStaticController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DocumentationStaticController } from './documentation-static.controller';\nimport { DocumentationStaticService } from './documentation-static.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n@Module({\n  imports: [ServeStaticModule.forRoot({\n    rootPath: \"documentation\",   // \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentationStaticService.html":{"url":"injectables/DocumentationStaticService.html","title":"injectable - DocumentationStaticService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentationStaticService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/documentation-static/src/documentation-static.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in apps/documentation-static/src/documentation-static.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class DocumentationStaticService {\n  getHello(): string {\n    return 'GO TO /index.html';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBotCommand.html":{"url":"interfaces/IBotCommand.html","title":"interface - IBotCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBotCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            command\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        command:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { match } from 'assert';\nimport axios from \"axios\";\nimport { Telegraf as TelegramBot } from \"telegraf\";\nimport { ITitledDocumentInfo } from 'apps/mkgtru-api/src/types/ITitledDocumentInfo';\nimport { PrismaClient } from '@prisma/client';\nimport { territories } from 'apps/mkgtru-api/src/types/territories';\ninterface IBotCommand { 'command': string, 'description': string };\nconst schedule = require('node-schedule');\n\n\nconst commands: IBotCommand[] = [\n  { 'command': \"start\", \"description\": \"запуск бота\" },\n  { 'command': \"changes\", \"description\": \"получение информации о заменах\" },\n  { 'command': \"status\", \"description\": \"получение состояния сервера\" },\n  { 'command': \"practice\", \"description\": \"получение расписаний практики\" },\n  { 'command': \"profile\", \"description\": \"настройка профиля\" },\n];\n\nconst _LINE_BREAK: string = \"\\n\";\nconst _ROW_BREAK: string = \"\\n\\n\";\n\nconst _CHECK_CHANGES_INTERVAL = 2 * 60 * 60 * 1000;\n\nconst _DOCUMENT_ERROR = \"Не удалось получить документ с сервера\";\n\nconst prisma = new PrismaClient();\n\n\n@Injectable()\nexport class MkgtOfficialBotService {\n\n  static info = {\n    started: false,\n    changesTimestamp: {\n      \"kuchin\": 0,\n      \"lublino\": 0\n    },\n  }\n\n  private bot = new TelegramBot(process.env.BOT_TOKEN);\n\n  async startBot() {\n    await this.bot.telegram.setMyCommands(commands);\n\n    //start message - registration\n    this.bot.start(async (context) => {\n      const sender = context.from;\n      const user = await this.getUser(sender.id);\n      console.log({ user });\n      if (user == null) {\n        try {\n          const tg = await prisma.telegramAccount.create({\n            data: {\n              name: `${sender.first_name}`,\n              surname: `${sender.last_name}`,\n              telegramId: sender.id,\n              username: `${sender.username}`\n            }\n          })\n          await prisma.users.create({\n            data: {\n              name: sender.first_name,\n              surname: `${sender.last_name}`,\n              email: null,\n              telegramAccountId: tg.id\n            }\n          });\n        } catch (error) {\n          console.log(typeof error)\n          console.log({ error })\n        }\n\n      }\n      context.sendMessage(`${sender.first_name}, добро пожаловать!${_LINE_BREAK}Если Вы с люблино, то воспользуйтесь командой /profile${_ROW_BREAK}/changes - просмотр замен${_LINE_BREAK}/practice - расписания практики${_ROW_BREAK}Остальные команды можно посмотреть, если ввести в строку сообщения символ косой черты: /`)\n\n    })\n\n    //настройка профиля\n    this.bot.command(\"profile\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n\n        const messageText = \"Ваш ранг: \" + user.role\n          + _ROW_BREAK +\n          \"Ваше имя: \" + user.name\n          + _ROW_BREAK +\n          \"Ваша территория: \" + user.territory\n\n        context.reply(messageText,\n          {\n            reply_markup: {\n              inline_keyboard: [\n                [\n                  { text: `Я с Кучина`, callback_data: \"ifromkuchin\" },\n                  { text: `Я с Люблино`, callback_data: \"ifromlublino\" },\n                ]\n              ]\n            }\n          }\n        )\n      }\n    })\n\n    //set lublino mode\n    this.bot.command(\"ifromlublino\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n        await prisma.users.update({\n          where: {\n            identifer: user.identifer\n          },\n          data: {\n            territory: \"lublino\"\n          }\n        })\n\n        context.reply(\"Вам установлен режи работы бота для Люблино.\")\n      }\n    })\n\n    //Обработка команды замены\n    this.bot.command(\"changes\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n        const doc: ITitledDocumentInfo | null = await this.getAPIResponse(\"/changes\", user.territory);\n        console.log({ doc })\n        if (!!doc) {\n          context.sendMessage(`Документ обновлён: ${doc?.last_modified.ru}`,\n            {\n              reply_markup: {\n                inline_keyboard: [\n                  [\n                    { text: \"Скачать\", url: doc?.links.file },\n                    { text: \"Просмотреть\", url: doc?.links.views.google_docs },\n                  ]\n                ]\n              }\n            })\n        } else {\n          context.sendMessage(_DOCUMENT_ERROR)\n        }\n      }\n    })\n\n    //Получение практики\n    this.bot.command(\"practice\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n        const doc: ITitledDocumentInfo[] = await this.getAPIResponse(\"/practicelist\", user.territory)\n        const buttons = [[]];\n\n        if (!!doc) {\n          doc?.map((document, index) => {\n            if (!buttons[index]) {\n              buttons[index] = [];\n            }\n            buttons[index] = [...buttons[index], { text: document.title, url: document.links.views.google_docs }]\n          })\n\n          context.sendMessage(`Расписания практики:`,\n            {\n              reply_markup: {\n                inline_keyboard: buttons\n              }\n            })\n        }\n        else {\n          context.sendMessage(_DOCUMENT_ERROR)\n        }\n\n\n      }\n    })\n\n    //checking status\n    this.bot.command(\"status\", async context => {\n      const resp: \"OK\" | string | null = await this.getAPIResponse(\"/status\")\n      context.sendMessage(resp || \"MKGTRU-API IS BROKEN\")\n    })\n\n    //set lublino callback\n    this.bot.action(\"ifromlublino\", async (context) => {\n      const user = await this.getUser(context?.from.id);\n\n      if (!!user) {\n        await prisma.users.update({\n          where: {\n            identifer: user.identifer\n          },\n          data: {\n            territory: \"lublino\"\n          }\n        })\n\n        try {\n          context.answerCbQuery(\"Вам установлен режим для территории Люблино\", { show_alert: true });\n        } catch (error) { }\n      }\n    })\n\n    //set kuchin callback\n    this.bot.action(\"ifromkuchin\", async (context) => {\n      const user = await this.getUser(context?.from.id);\n\n      if (!!user) {\n        await prisma.users.update({\n          where: {\n            identifer: user.identifer\n          },\n          data: {\n            territory: \"kuchin\"\n          }\n        })\n        try {\n          context.answerCbQuery(\"Вам установлен режим для территории Кучин\", { show_alert: true });\n        } catch (error) { }\n      }\n    })\n\n    if (!MkgtOfficialBotService.info.started) {\n      this.bot.launch();\n      MkgtOfficialBotService.info.started = true;\n    }\n\n\n    return \"started\"\n  }\n\n  stopBot() {\n    this.bot.stop();\n  }\n\n  async getAPIResponse(path: \"/changes\" | \"/status\" | \"/practicelist\", territory?: territories): Promise {\n    const url = `${process.env.MKGT_API_PATH}${path}?territory=${!!territory ? territory : \"lublino\"}`;\n    try {\n      const response = (await axios.get(url, { headers: { \"authorization\": `Bearer ${process.env.ACCESS_TOKEN}` }, timeout: 80000 }));\n      console.log({ 'req_to_api': url, status: response.statusText })\n      return response.data;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async getUser(tgId: number) {\n    const user = await prisma.users.findFirst({\n      include: {\n        tgAccount: true\n      },\n      where: {\n        tgAccount: {\n          telegramId: tgId\n        }\n      }\n    })\n    return user;\n  }\n\n\n\n  changesChecker = schedule.scheduleJob(\"* 1 * * *\", function () {\n    checkUpdateChanges(\"kuchin\");\n    checkUpdateChanges(\"lublino\");\n\n\n    async function checkUpdateChanges(territory: territories) {\n      const changesDocInfo: ITitledDocumentInfo = await this.getAPIResponse(\"/changes\", territory);\n\n      //определение необходимости рассылки\n      if (changesDocInfo.last_modified.timestamp != MkgtOfficialBotService.info.changesTimestamp[territory]) {\n        MkgtOfficialBotService.info.changesTimestamp[territory] = changesDocInfo.last_modified.timestamp;\n\n        const users = await prisma.users.findMany({\n          include: {\n            tgAccount: true,\n          },\n          where: {\n            territory: territory\n          }\n        })\n\n        users.forEach(user => {\n          const tgUserId = user.tgAccount.id;\n\n          try {\n            this.bot.telegram.sendMessage(tgUserId, `Замены обновлены для территории: ${territory}`)\n          } catch (error) { }\n\n        })\n\n      }\n      else {\n        console.log(\"changes not updated\")\n      }\n    }\n  });\n\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITitledDocumentInfo.html":{"url":"interfaces/ITitledDocumentInfo.html","title":"interface - ITitledDocumentInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITitledDocumentInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgtru-api/src/types/ITitledDocumentInfo.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data_type\n                                        \n                                \n                                \n                                        \n                                            last_modified\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data_type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_modified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_modified:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITitledDocumentInfo {\n    'title': string,\n    'last_modified': {\n        'ru': string,\n        'en-US': string,\n        'timestamp': number,\n    },\n    'links': {\n        'file': string,\n        'views': {\n            'google_docs': string,\n            'local_html': string,\n        },\n    },\n    'data_type': string,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenResponse.html":{"url":"interfaces/ITokenResponse.html","title":"interface - ITokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgtru-api/src/types/tokenObject.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITokenResponse { 'token': string }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MkgtOfficialBotController.html":{"url":"controllers/MkgtOfficialBotController.html","title":"controller - MkgtOfficialBotController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MkgtOfficialBotController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgt-official-bot/src/mkgt-official-bot.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBotDialog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getBotDialog\n                        \n                    \n                \n            \n            \n                \ngetBotDialog(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/status')\n                \n            \n\n            \n                \n                    Defined in apps/mkgt-official-bot/src/mkgt-official-bot.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Res } from '@nestjs/common';\nimport { MkgtOfficialBotService } from './mkgt-official-bot.service';\n\n@Controller()\nexport class MkgtOfficialBotController {\n  constructor(private readonly mkgtOfficialBotService: MkgtOfficialBotService) {\n    if (!MkgtOfficialBotService.info.started) {\n      this.mkgtOfficialBotService.startBot();\n      console.log(\"BOT_STARTED\")\n    }\n  }\n\n  @Get(\"/status\")\n  getBotDialog(@Res() res) {\n    res.status(HttpStatus.OK).send(\"Bot service started\");\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MkgtOfficialBotModule.html":{"url":"modules/MkgtOfficialBotModule.html","title":"module - MkgtOfficialBotModule","body":"\n                   \n\n\n\n\n    Modules\n    MkgtOfficialBotModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MkgtOfficialBotModule\n\n\n\ncluster_MkgtOfficialBotModule_providers\n\n\n\n\nMkgtOfficialBotService\n\nMkgtOfficialBotService\n\n\n\nMkgtOfficialBotModule\n\nMkgtOfficialBotModule\n\nMkgtOfficialBotModule -->\n\nMkgtOfficialBotService->MkgtOfficialBotModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/mkgt-official-bot/src/mkgt-official-bot.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MkgtOfficialBotService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MkgtOfficialBotController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MkgtOfficialBotController } from './mkgt-official-bot.controller';\nimport { MkgtOfficialBotService } from './mkgt-official-bot.service';\n\n@Module({\n  imports: [ConfigModule.forRoot({ envFilePath: \"./apps/mkgt-official-bot/.env\" }),],\n  controllers: [MkgtOfficialBotController],\n  providers: [MkgtOfficialBotService],\n})\nexport class MkgtOfficialBotModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MkgtOfficialBotService.html":{"url":"injectables/MkgtOfficialBotService.html","title":"injectable - MkgtOfficialBotService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MkgtOfficialBotService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bot\n                            \n                            \n                                changesChecker\n                            \n                            \n                                    Static\n                                info\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAPIResponse\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                startBot\n                            \n                            \n                                stopBot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAPIResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAPIResponse(path: \"/changes\" | \"/status\" | \"/practicelist\", territory?: territories)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                            \"/changes\" | \"/status\" | \"/practicelist\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    territory\n                                    \n                                                territories\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(tgId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tgId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        startBot\n                        \n                    \n                \n            \n            \n                \n                    \n                    startBot()\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopBot\n                        \n                    \n                \n            \n            \n                \nstopBot()\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TelegramBot(process.env.BOT_TOKEN)\n                    \n                \n                    \n                        \n                                Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changesChecker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : schedule.scheduleJob(\"* 1 * * *\", function () {\n    checkUpdateChanges(\"kuchin\");\n    checkUpdateChanges(\"lublino\");\n\n\n    async function checkUpdateChanges(territory: territories) {\n      const changesDocInfo: ITitledDocumentInfo = await this.getAPIResponse(\"/changes\", territory);\n\n      //определение необходимости рассылки\n      if (changesDocInfo.last_modified.timestamp != MkgtOfficialBotService.info.changesTimestamp[territory]) {\n        MkgtOfficialBotService.info.changesTimestamp[territory] = changesDocInfo.last_modified.timestamp;\n\n        const users = await prisma.users.findMany({\n          include: {\n            tgAccount: true,\n          },\n          where: {\n            territory: territory\n          }\n        })\n\n        users.forEach(user => {\n          const tgUserId = user.tgAccount.id;\n\n          try {\n            this.bot.telegram.sendMessage(tgUserId, `Замены обновлены для территории: ${territory}`)\n          } catch (error) { }\n\n        })\n\n      }\n      else {\n        console.log(\"changes not updated\")\n      }\n    }\n  })\n                    \n                \n                    \n                        \n                                Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:265\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    started: false,\n    changesTimestamp: {\n      \"kuchin\": 0,\n      \"lublino\": 0\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in apps/mkgt-official-bot/src/mkgt-official-bot.service.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { match } from 'assert';\nimport axios from \"axios\";\nimport { Telegraf as TelegramBot } from \"telegraf\";\nimport { ITitledDocumentInfo } from 'apps/mkgtru-api/src/types/ITitledDocumentInfo';\nimport { PrismaClient } from '@prisma/client';\nimport { territories } from 'apps/mkgtru-api/src/types/territories';\ninterface IBotCommand { 'command': string, 'description': string };\nconst schedule = require('node-schedule');\n\n\nconst commands: IBotCommand[] = [\n  { 'command': \"start\", \"description\": \"запуск бота\" },\n  { 'command': \"changes\", \"description\": \"получение информации о заменах\" },\n  { 'command': \"status\", \"description\": \"получение состояния сервера\" },\n  { 'command': \"practice\", \"description\": \"получение расписаний практики\" },\n  { 'command': \"profile\", \"description\": \"настройка профиля\" },\n];\n\nconst _LINE_BREAK: string = \"\\n\";\nconst _ROW_BREAK: string = \"\\n\\n\";\n\nconst _CHECK_CHANGES_INTERVAL = 2 * 60 * 60 * 1000;\n\nconst _DOCUMENT_ERROR = \"Не удалось получить документ с сервера\";\n\nconst prisma = new PrismaClient();\n\n\n@Injectable()\nexport class MkgtOfficialBotService {\n\n  static info = {\n    started: false,\n    changesTimestamp: {\n      \"kuchin\": 0,\n      \"lublino\": 0\n    },\n  }\n\n  private bot = new TelegramBot(process.env.BOT_TOKEN);\n\n  async startBot() {\n    await this.bot.telegram.setMyCommands(commands);\n\n    //start message - registration\n    this.bot.start(async (context) => {\n      const sender = context.from;\n      const user = await this.getUser(sender.id);\n      console.log({ user });\n      if (user == null) {\n        try {\n          const tg = await prisma.telegramAccount.create({\n            data: {\n              name: `${sender.first_name}`,\n              surname: `${sender.last_name}`,\n              telegramId: sender.id,\n              username: `${sender.username}`\n            }\n          })\n          await prisma.users.create({\n            data: {\n              name: sender.first_name,\n              surname: `${sender.last_name}`,\n              email: null,\n              telegramAccountId: tg.id\n            }\n          });\n        } catch (error) {\n          console.log(typeof error)\n          console.log({ error })\n        }\n\n      }\n      context.sendMessage(`${sender.first_name}, добро пожаловать!${_LINE_BREAK}Если Вы с люблино, то воспользуйтесь командой /profile${_ROW_BREAK}/changes - просмотр замен${_LINE_BREAK}/practice - расписания практики${_ROW_BREAK}Остальные команды можно посмотреть, если ввести в строку сообщения символ косой черты: /`)\n\n    })\n\n    //настройка профиля\n    this.bot.command(\"profile\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n\n        const messageText = \"Ваш ранг: \" + user.role\n          + _ROW_BREAK +\n          \"Ваше имя: \" + user.name\n          + _ROW_BREAK +\n          \"Ваша территория: \" + user.territory\n\n        context.reply(messageText,\n          {\n            reply_markup: {\n              inline_keyboard: [\n                [\n                  { text: `Я с Кучина`, callback_data: \"ifromkuchin\" },\n                  { text: `Я с Люблино`, callback_data: \"ifromlublino\" },\n                ]\n              ]\n            }\n          }\n        )\n      }\n    })\n\n    //set lublino mode\n    this.bot.command(\"ifromlublino\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n        await prisma.users.update({\n          where: {\n            identifer: user.identifer\n          },\n          data: {\n            territory: \"lublino\"\n          }\n        })\n\n        context.reply(\"Вам установлен режи работы бота для Люблино.\")\n      }\n    })\n\n    //Обработка команды замены\n    this.bot.command(\"changes\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n        const doc: ITitledDocumentInfo | null = await this.getAPIResponse(\"/changes\", user.territory);\n        console.log({ doc })\n        if (!!doc) {\n          context.sendMessage(`Документ обновлён: ${doc?.last_modified.ru}`,\n            {\n              reply_markup: {\n                inline_keyboard: [\n                  [\n                    { text: \"Скачать\", url: doc?.links.file },\n                    { text: \"Просмотреть\", url: doc?.links.views.google_docs },\n                  ]\n                ]\n              }\n            })\n        } else {\n          context.sendMessage(_DOCUMENT_ERROR)\n        }\n      }\n    })\n\n    //Получение практики\n    this.bot.command(\"practice\", async context => {\n      const user = await this.getUser(context.from.id);\n\n      if (!!user) {\n        const doc: ITitledDocumentInfo[] = await this.getAPIResponse(\"/practicelist\", user.territory)\n        const buttons = [[]];\n\n        if (!!doc) {\n          doc?.map((document, index) => {\n            if (!buttons[index]) {\n              buttons[index] = [];\n            }\n            buttons[index] = [...buttons[index], { text: document.title, url: document.links.views.google_docs }]\n          })\n\n          context.sendMessage(`Расписания практики:`,\n            {\n              reply_markup: {\n                inline_keyboard: buttons\n              }\n            })\n        }\n        else {\n          context.sendMessage(_DOCUMENT_ERROR)\n        }\n\n\n      }\n    })\n\n    //checking status\n    this.bot.command(\"status\", async context => {\n      const resp: \"OK\" | string | null = await this.getAPIResponse(\"/status\")\n      context.sendMessage(resp || \"MKGTRU-API IS BROKEN\")\n    })\n\n    //set lublino callback\n    this.bot.action(\"ifromlublino\", async (context) => {\n      const user = await this.getUser(context?.from.id);\n\n      if (!!user) {\n        await prisma.users.update({\n          where: {\n            identifer: user.identifer\n          },\n          data: {\n            territory: \"lublino\"\n          }\n        })\n\n        try {\n          context.answerCbQuery(\"Вам установлен режим для территории Люблино\", { show_alert: true });\n        } catch (error) { }\n      }\n    })\n\n    //set kuchin callback\n    this.bot.action(\"ifromkuchin\", async (context) => {\n      const user = await this.getUser(context?.from.id);\n\n      if (!!user) {\n        await prisma.users.update({\n          where: {\n            identifer: user.identifer\n          },\n          data: {\n            territory: \"kuchin\"\n          }\n        })\n        try {\n          context.answerCbQuery(\"Вам установлен режим для территории Кучин\", { show_alert: true });\n        } catch (error) { }\n      }\n    })\n\n    if (!MkgtOfficialBotService.info.started) {\n      this.bot.launch();\n      MkgtOfficialBotService.info.started = true;\n    }\n\n\n    return \"started\"\n  }\n\n  stopBot() {\n    this.bot.stop();\n  }\n\n  async getAPIResponse(path: \"/changes\" | \"/status\" | \"/practicelist\", territory?: territories): Promise {\n    const url = `${process.env.MKGT_API_PATH}${path}?territory=${!!territory ? territory : \"lublino\"}`;\n    try {\n      const response = (await axios.get(url, { headers: { \"authorization\": `Bearer ${process.env.ACCESS_TOKEN}` }, timeout: 80000 }));\n      console.log({ 'req_to_api': url, status: response.statusText })\n      return response.data;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async getUser(tgId: number) {\n    const user = await prisma.users.findFirst({\n      include: {\n        tgAccount: true\n      },\n      where: {\n        tgAccount: {\n          telegramId: tgId\n        }\n      }\n    })\n    return user;\n  }\n\n\n\n  changesChecker = schedule.scheduleJob(\"* 1 * * *\", function () {\n    checkUpdateChanges(\"kuchin\");\n    checkUpdateChanges(\"lublino\");\n\n\n    async function checkUpdateChanges(territory: territories) {\n      const changesDocInfo: ITitledDocumentInfo = await this.getAPIResponse(\"/changes\", territory);\n\n      //определение необходимости рассылки\n      if (changesDocInfo.last_modified.timestamp != MkgtOfficialBotService.info.changesTimestamp[territory]) {\n        MkgtOfficialBotService.info.changesTimestamp[territory] = changesDocInfo.last_modified.timestamp;\n\n        const users = await prisma.users.findMany({\n          include: {\n            tgAccount: true,\n          },\n          where: {\n            territory: territory\n          }\n        })\n\n        users.forEach(user => {\n          const tgUserId = user.tgAccount.id;\n\n          try {\n            this.bot.telegram.sendMessage(tgUserId, `Замены обновлены для территории: ${territory}`)\n          } catch (error) { }\n\n        })\n\n      }\n      else {\n        console.log(\"changes not updated\")\n      }\n    }\n  });\n\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MkgtruApiController.html":{"url":"controllers/MkgtruApiController.html","title":"controller - MkgtruApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MkgtruApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgtru-api/src/mkgtru-api.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mkgtru-api\n            \n\n\n            \n                Description\n            \n            \n                /mkgtru-api/* requests\nGetting information from the college website\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteProfile\n                            \n                            \n                                    Async\n                                getAuditories\n                            \n                            \n                                    Async\n                                getChanges\n                            \n                            \n                                getPing\n                            \n                            \n                                    Async\n                                getPracticeList\n                            \n                            \n                                    Async\n                                getTimetables\n                            \n                            \n                                    Async\n                                revokeToken\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteProfile(bearerToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:53\n                \n            \n\n\n            \n                \n                    Deletes the profile of the user who sent the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bearerToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuditories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuditories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('auditories')@CacheTTL(200)@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:149\n                \n            \n\n\n            \n                \n                    Getting information about the distribution of audiences\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        information about the distribution of audiences document\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getChanges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getChanges(territory: territories)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('changes')@CacheTTL(200)@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:39\n                \n            \n\n\n            \n                \n                    Getting information about schedule substitutions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    territory\n                                    \n                                                territories\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPing\n                        \n                    \n                \n            \n            \n                \ngetPing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status')\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:103\n                \n            \n\n\n            \n                \n                    Getting server status\n\n\n                    \n                    \n                    \n                        Returns :     OK\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPracticeList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPracticeList()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('practicelist')@CacheTTL(18000)@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:75\n                \n            \n\n\n            \n                \n                    Getting an array of practice schedule document descriptions\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimetables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimetables(territory: territories)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('timetables')@CacheTTL(18000)@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:91\n                \n            \n\n\n            \n                \n                    Getting a class schedule\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    territory\n                                    \n                                                territories\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeToken(bearerToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('token')@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:117\n                \n            \n\n\n            \n                \n                    Updating a token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bearerToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(name: string, email: string, surname?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@UseGuards(RequireApiKeyGuard)\n                \n            \n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.controller.ts:135\n                \n            \n\n\n            \n                \n                    Account registration\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nFirst name\n\n\n                                    \n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail\n\n\n                                    \n                                \n                                \n                                    surname\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nSecond name\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, CacheInterceptor, CacheKey, CacheTTL, Controller, Get, HttpException, HttpStatus, Patch, Query, UseGuards, UseInterceptors, Headers, Post, Delete } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { MkgtruApiService } from './mkgtru-api.service';\nimport { RequireApiKeyGuard } from './require-api-key/require-api-key.guard';\nimport { ITitledDocumentInfo } from './types/ITitledDocumentInfo';\nimport { territories } from './types/territories';\nimport { ITokenResponse } from './types/tokenObject';\n\n\n/**\n * # `/mkgtru-api/*` requests\n * \n * # **Getting information from the college website**\n * @date 3/13/2023 - 11:05:44 PM\n *\n * @export\n * @class MkgtruApiController\n * @typedef {MkgtruApiController}\n */\n@Controller(\"mkgtru-api\")\n@UseInterceptors(CacheInterceptor)\nexport class MkgtruApiController {\n  constructor(private readonly mkgtruApiService: MkgtruApiService) { }\n\n\n\n\n  /**\n   * Getting information about schedule substitutions\n   * @date 3/14/2023 - 12:16:08 AM\n   *\n   * @async\n   * @param {territories} territory\n   * @returns {Promise}\n   */\n  @Get(\"changes\")\n  @CacheTTL(200)\n  @UseGuards(RequireApiKeyGuard)\n  async getChanges(@Query(\"territory\") territory: territories): Promise {\n    return this.mkgtruApiService.getChanges(territory);\n  }\n\n  /**\n   * Deletes the profile of the user who sent the request\n   * @date 3/13/2023 - 11:48:18 PM\n   *\n   * @async\n   * @param {string} bearerToken\n   * @returns {*}\n   */\n  @Delete(\"profile\")\n  @UseGuards(RequireApiKeyGuard)\n  async deleteProfile(@Headers(\"Authorization\") bearerToken: string) {\n    const token = bearerToken.replace(\"Bearer \", \"\")\n    const prisma = new PrismaClient();\n    await prisma.users.delete({\n      where: {\n        token: token\n      }\n    })\n    prisma.$disconnect();\n    throw new HttpException(\"DELETED\", HttpStatus.OK)\n  }\n  \n  /**\n   * Getting an array of practice schedule document descriptions\n   * @date 3/14/2023 - 12:17:24 AM\n   *\n   * @async\n   * @returns {Promise}\n   */\n  @Get(\"practicelist\")\n  @CacheTTL(18000)\n  @UseGuards(RequireApiKeyGuard)\n  async getPracticeList(): Promise {\n    return this.mkgtruApiService.getPracticeList();\n  }\n\n  \n  /**\n   * Getting a class schedule\n   * @date 3/14/2023 - 12:20:04 AM\n   *\n   * @async\n   * @param {territories} territory\n   * @returns {Promise}\n   */\n  @Get(\"timetables\")\n  @CacheTTL(18000)\n  @UseGuards(RequireApiKeyGuard)\n  async getTimetables(@Query(\"territory\") territory: territories): Promise {\n    return this.mkgtruApiService.getTimetables(territory)\n  }\n  \n  \n  /**\n   * Getting server status\n   * @date 3/14/2023 - 1:04:23 AM\n   *\n   * @returns {\"OK\"}\n   */\n  @Get(\"status\")\n  getPing():\"OK\" {\n    return \"OK\"\n  }\n\n  /**\n   * Updating a token\n   * @date 3/14/2023 - 12:24:47 AM\n   *\n   * @async\n   * @param {string} bearerToken\n   * @returns {Promise}\n   */\n  @Patch(\"token\")\n  @UseGuards(RequireApiKeyGuard)\n  async revokeToken(@Headers(\"Authorization\") bearerToken: string):Promise {\n    return this.mkgtruApiService.revokeToken(bearerToken.replace(\"Bearer \", \"\"));\n  }\n\n  \n  \n  /**\n   * Account registration\n   * @date 3/14/2023 - 12:25:00 AM\n   *\n   * @async\n   * @param {string} name - First name\n   * @param {string} email - email\n   * @param {?string} [surname] - Second name\n   * @returns {Promise}\n   */\n  @Post(\"register\")\n  @UseGuards(RequireApiKeyGuard)\n  async updateProfile(@Body(\"name\") name: string, @Body(\"email\") email: string, @Body(\"surname\") surname?: string):Promise {\n    return this.mkgtruApiService.createAccount(name,surname,email);\n  }\n\n  /**\n     * Getting information about the distribution of audiences\n     * @date 3/13/2023 - 11:36:53 PM\n     *\n     * @async\n     * @returns {Promise} information about the distribution of audiences document\n     */\n  @Get(\"auditories\")\n  @CacheTTL(200)\n  @UseGuards(RequireApiKeyGuard)\n  async getAuditories(): Promise {\n    return this.mkgtruApiService.getAuditories();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MkgtruApiModule.html":{"url":"modules/MkgtruApiModule.html","title":"module - MkgtruApiModule","body":"\n                   \n\n\n\n\n    Modules\n    MkgtruApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MkgtruApiModule\n\n\n\ncluster_MkgtruApiModule_providers\n\n\n\n\nMkgtruApiService\n\nMkgtruApiService\n\n\n\nMkgtruApiModule\n\nMkgtruApiModule\n\nMkgtruApiModule -->\n\nMkgtruApiService->MkgtruApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/mkgtru-api/src/mkgtru-api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MkgtruApiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MkgtruApiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheModule } from '@nestjs/common';\nimport { MkgtruApiController } from './mkgtru-api.controller';\nimport { MkgtruApiService } from './mkgtru-api.service';\nimport { ConfigModule } from '@nestjs/config';\n@Module({\n  imports: [\n    ConfigModule.forRoot({ envFilePath: \"./apps/mkgtru-api/.env\" }),\n    CacheModule.register(),\n  ],\n  controllers: [MkgtruApiController],\n  providers: [MkgtruApiService],\n})\nexport class MkgtruApiModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MkgtruApiService.html":{"url":"injectables/MkgtruApiService.html","title":"injectable - MkgtruApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MkgtruApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/mkgtru-api/src/mkgtru-api.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                getAuditories\n                            \n                            \n                                    Async\n                                getChanges\n                            \n                            \n                                    Async\n                                getPracticeList\n                            \n                            \n                                    Async\n                                getTimetables\n                            \n                            \n                                    Async\n                                revokeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(name: string, surname: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.service.ts:25\n                \n            \n\n\n            \n                \n                    Creating new account in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    surname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuditories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuditories()\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.service.ts:90\n                \n            \n\n\n            \n                \n                    Getting information about auditories\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getChanges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getChanges(territory?: territories)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.service.ts:77\n                \n            \n\n\n            \n                \n                    Getting changes info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    territory\n                                    \n                                                territories\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPracticeList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPracticeList()\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.service.ts:124\n                \n            \n\n\n            \n                \n                    Getting array of available practice timetables\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimetables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimetables(territory?: territories)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.service.ts:104\n                \n            \n\n\n            \n                \n                    Getting timetables array\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    territory\n                                    \n                                                territories\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/mkgtru-api.service.ts:51\n                \n            \n\n\n            \n                \n                    Updates token in db\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport axios from \"axios\";\nimport parse from 'node-html-parser';\nimport { territories } from './types/territories';\nimport { ITitledDocumentInfo } from './types/ITitledDocumentInfo';\nimport HTMLElement from \"node_modules/node-html-parser/dist/nodes/html\";\nimport { PrismaClient } from '@prisma/client';\nimport { ITokenResponse } from './types/tokenObject';\nconst cuid = require(\"cuid\");\n\n@Injectable()\nexport class MkgtruApiService {\n\n  \n  /**\n   * Creating new account in database\n   * @date 3/14/2023 - 1:22:12 AM\n   *\n   * @async\n   * @param {string} name\n   * @param {string} surname\n   * @param {string} email\n   * @returns {Promise}\n   */\n  async createAccount(name:string, surname:string, email:string):Promise{\n    const token = cuid();\n\n    const prisma = new PrismaClient();\n    await prisma.users.create({\n      data:{\n        name,\n        surname,\n        email,\n        token:token\n      }\n    });\n    prisma.$disconnect();\n\n    return {token}\n  }\n\n  \n  /**\n   * Updates token in db\n   * @date 3/14/2023 - 1:22:34 AM\n   *\n   * @async\n   * @param {string} token\n   * @returns {Promise}\n   */\n  async revokeToken(token: string): Promise {\n    const newToken = `${cuid()}70qy00011${cuid()}`;\n    const prisma = new PrismaClient();\n    await prisma.users.update({\n      where: {\n        token: token,\n      },\n      data: {\n        token: newToken\n      }\n    })\n    prisma.$disconnect();\n    return {\n      'token': newToken\n    }\n  }\n\n  \n  /**\n   * Getting changes info\n   * @date 3/14/2023 - 1:22:52 AM\n   *\n   * @async\n   * @param {?territories} [territory]\n   * @returns {Promise}\n   */\n  async getChanges(territory?: territories): Promise {\n    const linkElement = await getElementsFromPage(`https://${process.env.SITE_DOMAIN}/index.php/nauka/raspisania-i-izmenenia-v-raspisaniah`, territory === \"lublino\" ? \"#sppb-addon-1643455125007 > div > div > a\" : \"#sppb-addon-1643455125006 > div > div > a\");\n    return await getTitledFileInfoByATag(linkElement[0])\n  }\n\n  \n  /**\n   * Getting information about auditories\n   * @date 3/14/2023 - 1:23:02 AM\n   *\n   * @async\n   * @returns {Promise}\n   */\n  async getAuditories(): Promise {\n    const linkElement = await getElementsFromPage(`https://${process.env.SITE_DOMAIN}/index.php/nauka/raspisania-i-izmenenia-v-raspisaniah`, \"#sppb-addon-1643621942381 > div > div > a\");\n    return await getTitledFileInfoByATag(linkElement[0])\n  }\n\n  \n  /**\n   * Getting timetables array\n   * @date 3/14/2023 - 1:24:07 AM\n   *\n   * @async\n   * @param {?territories} [territory]\n   * @returns {Promise}\n   */\n  async getTimetables(territory?: territories): Promise {\n    const linkElements = await getElementsFromPage(`https://${process.env.SITE_DOMAIN}/index.php/nauka/raspisania-i-izmenenia-v-raspisaniah`, territory === \"lublino\" ? \"#sppb-addon-1632589047343 > div > div > p > a\" : \"#sppb-addon-1632589047342 > div > div > a\");\n    const files = [];\n    for (const index in linkElements) {\n      if (Object.prototype.hasOwnProperty.call(linkElements, index)) {\n        const element = linkElements[index];\n        files.push(await getTitledFileInfoByATag(element))\n      }\n    }\n    return files\n  }\n\n  \n  /**\n   * Getting array of available practice timetables\n   * @date 3/14/2023 - 1:24:51 AM\n   *\n   * @async\n   * @returns {Promise}\n   */\n  async getPracticeList(): Promise {\n    const linkElements = await getElementsFromPage(`https://${process.env.SITE_DOMAIN}/index.php/nauka/raspisania-i-izmenenia-v-raspisaniah`, \"#sppb-addon-1646804333482 > div > div > p > a\");\n    const files = [];\n    for (const index in linkElements) {\n      if (Object.prototype.hasOwnProperty.call(linkElements, index)) {\n        const element = linkElements[index];\n        files.push(await getTitledFileInfoByATag(element))\n      }\n    }\n    return files\n  }\n}\n\n\n/**\n * Getting single element from page\n * @date 3/14/2023 - 1:25:10 AM\n *\n * @async\n * @param {string} uri\n * @param {string} selector\n * @returns {Promise}\n */\nasync function getElementsFromPage(uri: string, selector: string): Promise {\n  const pageResponse = await axios.get(uri);\n  if (pageResponse.status != 200) {\n    throw new HttpException('INTERNAL_SERVER_ERROR', HttpStatus.INTERNAL_SERVER_ERROR);\n  } else {\n    const root = parse(pageResponse.data);\n\n    const linkElements = root.querySelectorAll(selector);\n\n    if (!!linkElements && linkElements.length > 0) {\n      return linkElements;\n    } else {\n      throw new HttpException('INTERNAL_SERVER_ERROR', HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n}\n\n\n/**\n * Getting info about document by  tag element\n * @date 3/14/2023 - 1:25:23 AM\n *\n * @async\n * @param {HTMLElement} node\n * @returns {Promise}\n */\nasync function getTitledFileInfoByATag(node: HTMLElement): Promise {\n  const linkToFile = node.getAttribute(\"href\")\n  const documentResponse = await axios.get(`http://${process.env.SITE_DOMAIN}${linkToFile}`);\n  if (documentResponse.status != 200 || !linkToFile) {\n    throw new HttpException('INTERNAL_SERVER_ERROR', HttpStatus.INTERNAL_SERVER_ERROR);\n  } else {\n    const dataType: string = documentResponse.headers['content-type'];\n    const lastModifiedDate = new Date(documentResponse.headers['last-modified']);\n\n    const htmlViewCode = ``;\n    const htmlViewBase64 = Buffer.from(htmlViewCode).toString('base64');\n    return (\n      {\n        'title': node.innerText,\n        'last_modified': {\n          'ru': lastModifiedDate.toLocaleString('ru'),\n          'en-US': lastModifiedDate.toLocaleString('en-US'),\n          'timestamp': lastModifiedDate.getTime()\n        },\n        'links': {\n          'file': `https://${process.env.SITE_DOMAIN}${linkToFile}`,\n          'views': {\n            'google_docs': `https://docs.google.com/gview?url=https://${process.env.SITE_DOMAIN}${linkToFile}&embed=true`,\n            'local_html': `data:text/html;base64,${htmlViewBase64}`,\n          },\n        },\n        'data_type': dataType,\n      }\n    )\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RequireApiKeyGuard.html":{"url":"guards/RequireApiKeyGuard.html","title":"guard - RequireApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RequireApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/mkgtru-api/src/require-api-key/require-api-key.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/mkgtru-api/src/require-api-key/require-api-key.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n\n@Injectable()\nexport class RequireApiKeyGuard implements CanActivate {\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n    const keyName = \"authorization\" //api key property name\n    const headers = context.switchToHttp().getRequest().headers;\n    const authHeader: string | undefined = headers[keyName];\n    const token = authHeader?.replace(\"Bearer \", \"\");\n\n\n    const user = await prisma.users.findUnique({\n      where: {\n        token: `${token}`\n      }\n    })\n\n    if (!!user) {\n      return true\n    } else {\n      return false\n    }\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/documentation-static/src/documentation-static.controller.ts\n            \n            controller\n            DocumentationStaticController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/documentation-static/src/documentation-static.service.ts\n            \n            injectable\n            DocumentationStaticService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/documentation-static/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.controller.ts\n            \n            controller\n            MkgtOfficialBotController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            injectable\n            MkgtOfficialBotService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            interface\n            IBotCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            _CHECK_CHANGES_INTERVAL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            _DOCUMENT_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            _LINE_BREAK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            _ROW_BREAK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            commands\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n            \n            variable\n            schedule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/mkgtru-api.controller.ts\n            \n            controller\n            MkgtruApiController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/mkgtru-api.service.ts\n            \n            injectable\n            MkgtruApiService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/mkgtru-api.service.ts\n            \n            function\n            getElementsFromPage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/mkgtru-api.service.ts\n            \n            function\n            getTitledFileInfoByATag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/mkgtru-api.service.ts\n            \n            variable\n            cuid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/require-api-key/require-api-key.guard.ts\n            \n            guard\n            RequireApiKeyGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/require-api-key/require-api-key.guard.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/types/ITitledDocumentInfo.ts\n            \n            interface\n            ITitledDocumentInfo\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/mkgtru-api/src/types/tokenObject.ts\n            \n            interface\n            ITokenResponse\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.1\n        \n            @prisma/client : ^4.11.0\n        \n            axios : ^1.3.4\n        \n            cache-manager : ^5.1.7\n        \n            cuid : ^3.0.0\n        \n            nest : ^0.1.6\n        \n            node-html-parser : ^6.1.5\n        \n            node-schedule : ^2.1.1\n        \n            prisma : ^4.11.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            telegraf : ^4.12.2\n        \n            webpack : ^5.76.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            getElementsFromPage   (apps/.../mkgtru-api.service.ts)\n                        \n                        \n                            getTitledFileInfoByATag   (apps/.../mkgtru-api.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/documentation-static/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/mkgt-official-bot/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/mkgtru-api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/mkgtru-api/src/mkgtru-api.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getElementsFromPage\n                        \n                    \n                \n            \n            \n                \ngetElementsFromPage(uri: string, selector: string)\n                \n            \n\n\n\n\n            \n                \n                    Getting single element from page\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uri\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    selector\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTitledFileInfoByATag\n                        \n                    \n                \n            \n            \n                \ngetTitledFileInfoByATag(node: HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                    Getting info about document by  tag element\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMKGTRU-API - Единый интерфейс доступа\nк информации сайта МКТ с открытым исходным кодом \n\n\n{\n\"by\":\"students\",\n\"for\":\"students\",\n}\n\nLINKS\nDocumentation\nSERVER API documentation\nBot example link\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DocumentationStaticModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MkgtOfficialBotModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MkgtruApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DocumentationStaticModule\n\n\n\ncluster_DocumentationStaticModule_providers\n\n\n\ncluster_MkgtOfficialBotModule\n\n\n\ncluster_MkgtOfficialBotModule_providers\n\n\n\ncluster_MkgtruApiModule\n\n\n\ncluster_MkgtruApiModule_providers\n\n\n\n\nDocumentationStaticService\n\nDocumentationStaticService\n\n\n\nDocumentationStaticModule\n\nDocumentationStaticModule\n\nDocumentationStaticModule -->\n\nDocumentationStaticService->DocumentationStaticModule\n\n\n\n\n\nMkgtOfficialBotService\n\nMkgtOfficialBotService\n\n\n\nMkgtOfficialBotModule\n\nMkgtOfficialBotModule\n\nMkgtOfficialBotModule -->\n\nMkgtOfficialBotService->MkgtOfficialBotModule\n\n\n\n\n\nMkgtruApiService\n\nMkgtruApiService\n\n\n\nMkgtruApiModule\n\nMkgtruApiModule\n\nMkgtruApiModule -->\n\nMkgtruApiService->MkgtruApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Path: https://mkgtru-api.onrender.com\n        \n            License : PRIVATE\n        \n            Author : https://github.com/AlexC-ux\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            territories   (apps/.../territories.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/mkgtru-api/src/types/territories.ts\n    \n    \n        \n            \n                \n                    \n                    territories\n                \n            \n            \n                \n                        \"kuchin\" | \"lublino\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            _CHECK_CHANGES_INTERVAL   (apps/.../mkgt-official-bot.service.ts)\n                        \n                        \n                            _DOCUMENT_ERROR   (apps/.../mkgt-official-bot.service.ts)\n                        \n                        \n                            _LINE_BREAK   (apps/.../mkgt-official-bot.service.ts)\n                        \n                        \n                            _ROW_BREAK   (apps/.../mkgt-official-bot.service.ts)\n                        \n                        \n                            commands   (apps/.../mkgt-official-bot.service.ts)\n                        \n                        \n                            cuid   (apps/.../mkgtru-api.service.ts)\n                        \n                        \n                            prisma   (apps/.../mkgt-official-bot.service.ts)\n                        \n                        \n                            prisma   (apps/.../require-api-key.guard.ts)\n                        \n                        \n                            schedule   (apps/.../mkgt-official-bot.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/mkgt-official-bot/src/mkgt-official-bot.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        _CHECK_CHANGES_INTERVAL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 2 * 60 * 60 * 1000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _DOCUMENT_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Не удалось получить документ с сервера\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _LINE_BREAK\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\\n\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _ROW_BREAK\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\\n\\n\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commands\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IBotCommand[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  { 'command': \"start\", \"description\": \"запуск бота\" },\n  { 'command': \"changes\", \"description\": \"получение информации о заменах\" },\n  { 'command': \"status\", \"description\": \"получение состояния сервера\" },\n  { 'command': \"practice\", \"description\": \"получение расписаний практики\" },\n  { 'command': \"profile\", \"description\": \"настройка профиля\" },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schedule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('node-schedule')\n                    \n                \n\n\n        \n    \n\n    apps/mkgtru-api/src/mkgtru-api.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cuid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"cuid\")\n                    \n                \n\n\n        \n    \n\n    apps/mkgtru-api/src/require-api-key/require-api-key.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
